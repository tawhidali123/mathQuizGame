{"ast":null,"code":"var _jsxFileName = \"/Users/frankyliu/Desktop/mod4/mathQuizGame/frontend/src/components/ViewScores.js\";\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nclass ViewScores extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      scores: [],\n      users: [],\n      search: \"\"\n    };\n\n    this.onChange = event => {\n      this.setState({\n        search: event.target.value\n      });\n    };\n\n    this.keyPress = event => {\n      if (event.key === \"Enter\") {\n        this.state.users.filter(user => {\n          return user.toLowerCase().search(event.target.value.toLowerCase()) !== -1;\n        });\n        this.setState();\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/scores\").then(resp => resp.json()).then(scores => {\n      this.setState({\n        scores: scores\n      });\n    });\n    fetch(\"http://localhost:3000/users\").then(resp => resp.json()).then(users => {\n      this.setState({\n        users: users\n      });\n    });\n  }\n\n  render() {\n    console.log(this.state.search);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      label: \"search\",\n      name: \"search\",\n      value: this.state.search,\n      onChange: this.onChange,\n      onKeyPress: this.keyPress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), this.state.scores.map(score => {\n      if (score.difficulty_id === 1) {\n        score.difficulty_id = \"Easy\";\n      } else if (score.difficulty_id === 2) {\n        score.difficulty_id = \"Medium\";\n      } else if (score.difficulty_id === 3) {\n        score.difficulty_id = \"Hard\";\n      }\n\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Difficulty:\"), score.difficulty_id, React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Score:\"), score.points, React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Player:\"), this.state.users.map(user => {\n        if (user.id === score.user_id) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79\n            },\n            __self: this\n          }, user.username);\n        }\n      }));\n    })));\n  }\n\n}\n\nexport default ViewScores;","map":{"version":3,"sources":["/Users/frankyliu/Desktop/mod4/mathQuizGame/frontend/src/components/ViewScores.js"],"names":["React","Component","Grid","Typography","TextField","ViewScores","state","scores","users","search","onChange","event","setState","target","value","keyPress","key","filter","user","toLowerCase","componentDidMount","fetch","then","resp","json","render","console","log","map","score","difficulty_id","points","id","user_id","username"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nclass ViewScores extends Component {\n\n    state={\n        scores: [],\n        users: [],\n        search: \"\"\n    }\n\n    componentDidMount(){\n        fetch(`http://localhost:3000/scores`)\n        .then(resp => resp.json())\n        .then(scores => {\n            this.setState({scores: scores})\n        })\n\n        fetch(`http://localhost:3000/users`)\n        .then(resp => resp.json())\n        .then(users => {\n            this.setState({users: users})\n        })\n        \n    }\n\n    onChange = (event) => {\n        this.setState({\n            search: event.target.value\n        })\n      \n    }\n    keyPress = (event) => {\n        if (event.key === \"Enter\"){\n            this.state.users.filter(user => {\n                return user.toLowerCase().search(event.target.value.toLowerCase()) !== -1;\n            })\n            this.setState()\n        }\n\n    }\n\n    render() {\n        console.log(this.state.search)\n        return (\n            <div>\n                <Grid>\n                <TextField \n                label=\"search\" \n                name=\"search\"\n                value={this.state.search}\n                onChange={this.onChange}\n                onKeyPress= {this.keyPress}\n                />\n                    {this.state.scores.map(score => {\n                    if(score.difficulty_id === 1){\n                        score.difficulty_id = \"Easy\"\n                      } else if(score.difficulty_id === 2){\n                        score.difficulty_id = \"Medium\"\n                      } else if(score.difficulty_id === 3){\n                        score.difficulty_id = \"Hard\"\n                      }\n                return <ul> \n                    <Typography>\n                    Difficulty:\n                    </Typography>\n                    {score.difficulty_id } \n                    <Typography>\n                    Score:\n                    </Typography>\n                    { score.points }\n                    <Typography>\n                    Player:\n                    </Typography>\n                    {this.state.users.map(user => {\n                        if(user.id === score.user_id){\n                            return <div>{user.username}</div>\n                        } \n                    })}\n                    </ul>})}\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport default ViewScores;\n"]},"metadata":{},"sourceType":"module"}