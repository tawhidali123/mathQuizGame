{"ast":null,"code":"var _jsxFileName = \"/Users/tawhid/Desktop/Coding Projects/mathquizgame/frontend/src/components/ViewScores.js\";\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport HighScoreBttn from './HighScoreBttn';\n\nclass ViewScores extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      scores: [],\n      users: []\n    };\n\n    this.handleClick = evt => {\n      console.log(\"sorting\"); // let blahh = this.state.scores\n\n      let blahh = [...this.state.scores];\n      const newBlahh = blahh.sort((a, b) => {\n        return b.points - a.points;\n      });\n      this.setState({\n        scores: newBlahh\n      }, () => {\n        console.log(this.state.scores);\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/scores\").then(resp => resp.json()).then(scores => {\n      console.log(scores, \"scores\");\n      this.setState({\n        scores: scores\n      });\n    });\n    fetch(\"http://localhost:3000/users\").then(resp => resp.json()).then(users => {\n      console.log(users, \"users\");\n      this.setState({\n        users: users\n      });\n    });\n  }\n\n  render() {\n    console.log(this.state.users);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, this.state.scores.map(score => {\n      if (score.difficulty_id === 1) {\n        score.difficulty_id = \"Easy\";\n      } else if (score.difficulty_id === 2) {\n        score.difficulty_id = \"Medium\";\n      } else if (score.difficulty_id === 3) {\n        score.difficulty_id = \"Hard\";\n      }\n\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Difficulty:\"), score.difficulty_id, React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Score:\"), score.points, React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Player:\"), this.state.users.map(user => {\n        if (user.id === score.user_id) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          }, user.username);\n        }\n      }));\n    }), React.createElement(HighScoreBttn, {\n      clickThingy: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default ViewScores;\n{\n  /* <button onClick={this.handleClick}>\n                             Highest score\n                         </button> */\n}","map":{"version":3,"sources":["/Users/tawhid/Desktop/Coding Projects/mathquizgame/frontend/src/components/ViewScores.js"],"names":["React","Component","Grid","Typography","HighScoreBttn","ViewScores","state","scores","users","handleClick","evt","console","log","blahh","newBlahh","sort","a","b","points","setState","componentDidMount","fetch","then","resp","json","render","map","score","difficulty_id","user","id","user_id","username"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport HighScoreBttn from './HighScoreBttn';\n\nclass ViewScores extends Component {\n\n    state={\n        scores: [],\n        users: []\n    }\n\n    componentDidMount(){\n        fetch(`http://localhost:3000/scores`)\n        .then(resp => resp.json())\n        .then(scores => {\n            console.log(scores, \"scores\")\n            this.setState({scores: scores})\n        })\n\n        fetch(`http://localhost:3000/users`)\n        .then(resp => resp.json())\n        .then(users => {\n            console.log(users, \"users\")\n            this.setState({users: users})\n        })\n        \n    }\n\n\n\n\n    handleClick = (evt) => {\n        console.log(\"sorting\")\n        // let blahh = this.state.scores\n        let blahh = [...this.state.scores]\n\n        const newBlahh = blahh.sort((a, b) => {\n            return b.points - a.points\n            \n        })\n\n\n        this.setState({\n            scores: newBlahh\n        }, ()=>{ console.log(this.state.scores)})\n\n\n    }\n\n\n\n\n    render() {\n        console.log(this.state.users)\n        return (\n            <div>\n                <Grid>\n                        {this.state.scores.map(score => {\n                        if(score.difficulty_id === 1){\n                            score.difficulty_id = \"Easy\"\n                        } else if(score.difficulty_id === 2){\n                            score.difficulty_id = \"Medium\"\n                        } else if(score.difficulty_id === 3){\n                            score.difficulty_id = \"Hard\"\n                        }\n                    return <ul> \n                        <Typography>\n                        Difficulty:\n                        </Typography>\n                        {score.difficulty_id } \n                        <Typography>\n                        Score:\n                        </Typography>\n                        { score.points }\n                        <Typography>\n                        Player:\n                        </Typography>\n                        {this.state.users.map(user => {\n                            if(user.id === score.user_id){\n                                return <div>{user.username}</div>\n                            } \n                        })}\n                        </ul>})}\n\n                        <HighScoreBttn clickThingy={this.handleClick} />\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport default ViewScores;\n\n\n\n\n{/* <button onClick={this.handleClick}>\n                            Highest score\n                        </button> */}"]},"metadata":{},"sourceType":"module"}